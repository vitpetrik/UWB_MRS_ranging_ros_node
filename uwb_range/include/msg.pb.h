// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_INCLUDED_msg_2eproto
#define PROTOBUF_INCLUDED_msg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_msg_2eproto 

namespace protobuf_msg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_msg_2eproto
namespace beacon {
class beacon_msg;
class beacon_msgDefaultTypeInternal;
extern beacon_msgDefaultTypeInternal _beacon_msg_default_instance_;
class gps_t;
class gps_tDefaultTypeInternal;
extern gps_tDefaultTypeInternal _gps_t_default_instance_;
}  // namespace beacon
namespace google {
namespace protobuf {
template<> ::beacon::beacon_msg* Arena::CreateMaybeMessage<::beacon::beacon_msg>(Arena*);
template<> ::beacon::gps_t* Arena::CreateMaybeMessage<::beacon::gps_t>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace beacon {

// ===================================================================

class gps_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beacon.gps_t) */ {
 public:
  gps_t();
  virtual ~gps_t();

  gps_t(const gps_t& from);

  inline gps_t& operator=(const gps_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gps_t(gps_t&& from) noexcept
    : gps_t() {
    *this = ::std::move(from);
  }

  inline gps_t& operator=(gps_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const gps_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gps_t* internal_default_instance() {
    return reinterpret_cast<const gps_t*>(
               &_gps_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(gps_t* other);
  friend void swap(gps_t& a, gps_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gps_t* New() const final {
    return CreateMaybeMessage<gps_t>(NULL);
  }

  gps_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gps_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const gps_t& from);
  void MergeFrom(const gps_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gps_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double LONG = 1;
  void clear_long_();
  static const int kLONGFieldNumber = 1;
  double long_() const;
  void set_long_(double value);

  // double LAT = 2;
  void clear_lat();
  static const int kLATFieldNumber = 2;
  double lat() const;
  void set_lat(double value);

  // @@protoc_insertion_point(class_scope:beacon.gps_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double long__;
  double lat_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class beacon_msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beacon.beacon_msg) */ {
 public:
  beacon_msg();
  virtual ~beacon_msg();

  beacon_msg(const beacon_msg& from);

  inline beacon_msg& operator=(const beacon_msg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  beacon_msg(beacon_msg&& from) noexcept
    : beacon_msg() {
    *this = ::std::move(from);
  }

  inline beacon_msg& operator=(beacon_msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const beacon_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const beacon_msg* internal_default_instance() {
    return reinterpret_cast<const beacon_msg*>(
               &_beacon_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(beacon_msg* other);
  friend void swap(beacon_msg& a, beacon_msg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline beacon_msg* New() const final {
    return CreateMaybeMessage<beacon_msg>(NULL);
  }

  beacon_msg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<beacon_msg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const beacon_msg& from);
  void MergeFrom(const beacon_msg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(beacon_msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uav_name = 1;
  void clear_uav_name();
  static const int kUavNameFieldNumber = 1;
  const ::std::string& uav_name() const;
  void set_uav_name(const ::std::string& value);
  #if LANG_CXX11
  void set_uav_name(::std::string&& value);
  #endif
  void set_uav_name(const char* value);
  void set_uav_name(const char* value, size_t size);
  ::std::string* mutable_uav_name();
  ::std::string* release_uav_name();
  void set_allocated_uav_name(::std::string* uav_name);

  // .beacon.gps_t gps = 4;
  bool has_gps() const;
  void clear_gps();
  static const int kGpsFieldNumber = 4;
  private:
  const ::beacon::gps_t& _internal_gps() const;
  public:
  const ::beacon::gps_t& gps() const;
  ::beacon::gps_t* release_gps();
  ::beacon::gps_t* mutable_gps();
  void set_allocated_gps(::beacon::gps_t* gps);

  // uint64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 uav_type = 3;
  void clear_uav_type();
  static const int kUavTypeFieldNumber = 3;
  ::google::protobuf::int32 uav_type() const;
  void set_uav_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:beacon.beacon_msg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uav_name_;
  ::beacon::gps_t* gps_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 uav_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// gps_t

// double LONG = 1;
inline void gps_t::clear_long_() {
  long__ = 0;
}
inline double gps_t::long_() const {
  // @@protoc_insertion_point(field_get:beacon.gps_t.LONG)
  return long__;
}
inline void gps_t::set_long_(double value) {
  
  long__ = value;
  // @@protoc_insertion_point(field_set:beacon.gps_t.LONG)
}

// double LAT = 2;
inline void gps_t::clear_lat() {
  lat_ = 0;
}
inline double gps_t::lat() const {
  // @@protoc_insertion_point(field_get:beacon.gps_t.LAT)
  return lat_;
}
inline void gps_t::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:beacon.gps_t.LAT)
}

// -------------------------------------------------------------------

// beacon_msg

// string uav_name = 1;
inline void beacon_msg::clear_uav_name() {
  uav_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& beacon_msg::uav_name() const {
  // @@protoc_insertion_point(field_get:beacon.beacon_msg.uav_name)
  return uav_name_.GetNoArena();
}
inline void beacon_msg::set_uav_name(const ::std::string& value) {
  
  uav_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:beacon.beacon_msg.uav_name)
}
#if LANG_CXX11
inline void beacon_msg::set_uav_name(::std::string&& value) {
  
  uav_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:beacon.beacon_msg.uav_name)
}
#endif
inline void beacon_msg::set_uav_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uav_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:beacon.beacon_msg.uav_name)
}
inline void beacon_msg::set_uav_name(const char* value, size_t size) {
  
  uav_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:beacon.beacon_msg.uav_name)
}
inline ::std::string* beacon_msg::mutable_uav_name() {
  
  // @@protoc_insertion_point(field_mutable:beacon.beacon_msg.uav_name)
  return uav_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* beacon_msg::release_uav_name() {
  // @@protoc_insertion_point(field_release:beacon.beacon_msg.uav_name)
  
  return uav_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void beacon_msg::set_allocated_uav_name(::std::string* uav_name) {
  if (uav_name != NULL) {
    
  } else {
    
  }
  uav_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uav_name);
  // @@protoc_insertion_point(field_set_allocated:beacon.beacon_msg.uav_name)
}

// uint64 id = 2;
inline void beacon_msg::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 beacon_msg::id() const {
  // @@protoc_insertion_point(field_get:beacon.beacon_msg.id)
  return id_;
}
inline void beacon_msg::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:beacon.beacon_msg.id)
}

// int32 uav_type = 3;
inline void beacon_msg::clear_uav_type() {
  uav_type_ = 0;
}
inline ::google::protobuf::int32 beacon_msg::uav_type() const {
  // @@protoc_insertion_point(field_get:beacon.beacon_msg.uav_type)
  return uav_type_;
}
inline void beacon_msg::set_uav_type(::google::protobuf::int32 value) {
  
  uav_type_ = value;
  // @@protoc_insertion_point(field_set:beacon.beacon_msg.uav_type)
}

// .beacon.gps_t gps = 4;
inline bool beacon_msg::has_gps() const {
  return this != internal_default_instance() && gps_ != NULL;
}
inline void beacon_msg::clear_gps() {
  if (GetArenaNoVirtual() == NULL && gps_ != NULL) {
    delete gps_;
  }
  gps_ = NULL;
}
inline const ::beacon::gps_t& beacon_msg::_internal_gps() const {
  return *gps_;
}
inline const ::beacon::gps_t& beacon_msg::gps() const {
  const ::beacon::gps_t* p = gps_;
  // @@protoc_insertion_point(field_get:beacon.beacon_msg.gps)
  return p != NULL ? *p : *reinterpret_cast<const ::beacon::gps_t*>(
      &::beacon::_gps_t_default_instance_);
}
inline ::beacon::gps_t* beacon_msg::release_gps() {
  // @@protoc_insertion_point(field_release:beacon.beacon_msg.gps)
  
  ::beacon::gps_t* temp = gps_;
  gps_ = NULL;
  return temp;
}
inline ::beacon::gps_t* beacon_msg::mutable_gps() {
  
  if (gps_ == NULL) {
    auto* p = CreateMaybeMessage<::beacon::gps_t>(GetArenaNoVirtual());
    gps_ = p;
  }
  // @@protoc_insertion_point(field_mutable:beacon.beacon_msg.gps)
  return gps_;
}
inline void beacon_msg::set_allocated_gps(::beacon::gps_t* gps) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gps_;
  }
  if (gps) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gps = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gps, submessage_arena);
    }
    
  } else {
    
  }
  gps_ = gps;
  // @@protoc_insertion_point(field_set_allocated:beacon.beacon_msg.gps)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace beacon

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_msg_2eproto
